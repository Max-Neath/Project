#include <Wire.h>
#include <VL53L0X.h>
#include <VL53L1X.h>

VL53L1X sensor3;
VL53L0X sensor;
VL53L0X sensor2;

// Motor 1 - Left
int pwmA = 4; //PWM Out
int in1A = 2; //For Forward
int in2A = 3; //For Back
int MotorSpeedA = 0; // Motor Speed

// Motor 2 - Right 
int pwmB = 7; //PWM Out
int in1B = 5; //For Forward
int in2B = 6; //For Back
int MotorSpeedB = 0; // Motor Speed

char path[100] = "";
unsigned char path_length = 0;
int speed = 0;

void setup()
{

  pinMode(9, OUTPUT); //For Sensor XShut
  pinMode(10, OUTPUT); //For Sensor2 XShut
  pinMode(11, OUTPUT);
 
  digitalWrite(9, LOW); //Shutting sensor down
  digitalWrite(10, LOW); //Shutting sensor2 down
  digitalWrite(11, LOW);
 
  delay(500);
  Wire.begin(); //Start SDA
  Wire.setClock(400000);

  Serial.begin (19200); //Setting rate


  //SENSOR
  //This is used to initiate one of the Vl53L0X and then re-address it so it can be singlely addressed. 
  pinMode(9, INPUT);
  delay(150);
  sensor.init(true);
  delay(100);
  sensor.setAddress((uint8_t)22); //gives address 16

  //SENSOR 2
  pinMode(10, INPUT);
  delay(150);
  sensor2.init(true);
  delay(100);
  sensor2.setAddress((uint8_t)25); //gives address of 19

  //SENSOR 3
  pinMode(11, INPUT);
  delay(150);
  sensor3.init(true);
  delay(100);
  sensor3.setAddress((uint8_t)28); //gives address of 19
  sensor3.setDistanceMode(VL53L1X::Medium);

  Serial.println("");
  Serial.println("addresses set");
  Serial.println("");
  Serial.println("");

//Sets the maximum time to wait for data from the sensors. 
  sensor.setTimeout(500);
  sensor2.setTimeout(500);

//Setting Pins for MOTORA
  pinMode(pwmA, OUTPUT);
  pinMode(in1A, OUTPUT);
  pinMode(in2A, OUTPUT);
  
//Setting Pins for MOTORB
  pinMode(pwmB, OUTPUT);
  pinMode(in1B, OUTPUT);
  pinMode(in2B, OUTPUT);
}

char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right)
{
 if(found_left){
   return 'L';
 } 
 else if(found_straight){
   return 'S';
 }
 else if(found_right){
   return 'R';
 }
 else {
   return 'B';
 }
}

void simplify_path()
{
  //Only simplify the path if the second-to-last turn was a 'B'
  if(path_length < 3 || path[path_length-2] != 'B') {
    return;
  }

  int total_angle = 0;
  int i;
  for(i=1;i<=3;i++)
  {
    switch(path[path_length-i])
    {
      case 'R':
        total_angle += 90;
        break;
      case 'L':
        total_angle += 270;
        break;
      case 'B':
        total_angle += 180;
        break;
    }
  }

  total_angle = total_angle % 360;

  // Replace all of those turns with a single one.
  switch(total_angle)
  {
    case 0:
      path[path_length - 3] = 'S';
      break;
    case 90:
      path[path_length - 3] = 'R';
      break;
    case 180:
      path[path_length - 3] = 'B';
      break;
    case 270:
      path[path_length - 3] = 'L';
      break;
  }

  // The path is now two steps shorter.
  path_length -= 2;
}

void straight (int speed) {
  digitalWrite(in1A, HIGH);
  digitalWrite(in2A, LOW);

  digitalWrite(in1B, HIGH);
  digitalWrite(in2B, LOW);

  MotorSpeedA = speed;
  MotorSpeedB = speed;
}

void right_turn ()
{
  // Setting Pins for motor A
  digitalWrite(in1A, HIGH);
  digitalWrite(in2A, LOW);
  
  // Setting Pins for motor B
  digitalWrite(in1B, LOW);
  digitalWrite(in2B, HIGH);

  MotorSpeedA = 80;
  MotorSpeedB = 80;
  delay(200);
}

void left_turn ()
{
  // Setting Pins for motor A
  digitalWrite(in1A, LOW);
  digitalWrite(in2A, HIGH);
  
  // Setting Pins for motor B
  digitalWrite(in1B, HIGH);
  digitalWrite(in2B, LOW);

  MotorSpeedA = 80;
  MotorSpeedB = 80;
  delay(200);
}

void follow_segment()
{
  digitalWrite(in1A, HIGH);
  digitalWrite(in2A, LOW);

  digitalWrite(in1B, HIGH);
  digitalWrite(in2B, LOW);

  int last_proportional = 0;
  long integral = 0;

  while (1)
  {
    // Get the position of the line.
    long DISTANCE_L = (sensor.readRangeSingleMillimeters());
    long DISTANCE_R = (sensor2.readRangeSingleMillimeters());
    long DISTANCE_F = (sensor3.readRangeSingleMillimeters());
    
    if (DISTANCE_L > 2000) {
      DISTANCE_L = 2000;
    }
    
    if (DISTANCE_R > 2000) {
      DISTANCE_R = 2000;
    }

    

    // if positive, then needs to be adjusted clockwise
    // if negative, then needs to be adjusted anti-clockwise
    int DIFFERENCE = DISTANCE_R-DISTANCE_L;

    // The "proportional" term should be 0 when we are central in the maze.
    // The two distances should be equal.
    int proportional = DIFFERENCE;

    // Compute the derivative (change) and intergal (sum) of the
    // position.
    int derivative = proportional - last_proportional;
    integral += proportional;

    // Remeber the last position.
    last_proportional = proportional;

    // Compute the difference between the two motor power settings,
    // m1 - m2. If this is a positive number the robot will turn
    // to the left. If it is a negative number the robot will 
    // turn to the right, and the magnitude of th number determines
    // the sharpness of the turn.
    int power_difference = proportional/20 + integral/10000 + derivative*3/2;

    // Compute the actual motor settings. We never set either motor
    // to a negative value.
    const int max = 100; // The maximum speed
    if (power_difference > max){
      power_difference = max;
    }
    else if (power_difference < - max){
      power_difference = -max;
    }
    
    if (power_difference < 0) {
      MotorSpeedA = max + power_difference;
      MotorSpeedB = max;
      analogWrite(pwmA, MotorSpeedA);
      analogWrite(pwmB, MotorSpeedB);
    }
    else {
      MotorSpeedA = max;
      MotorSpeedB = max - power_difference;      
      analogWrite(pwmA, MotorSpeedA);
      analogWrite(pwmB, MotorSpeedB);
    }

    if((DISTANCE_L < 100 || DISTANCE_R < 100) && DISTANCE_F < 100)
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			right_turn();
      if(DISTANCE_L < 100 && DISTANCE_R < 100 && DISTANCE_F < 100)
      {
        return;
      }
		}
		else if(DISTANCE_F < 100)
		{
			// Found an intersection to the left.
			if(DISTANCE_L > 200 && DISTANCE_R > 200) {
        return;
      }
      else {
        right_turn();
        if (DISTANCE_L > 200 && DISTANCE_R > 200) {
          return;
          }
      }
		}
	}
}

void turn(char dir)
{
  switch(dir)
  {
    case 'L':
    // Turn left.
      left_turn();
      break;
    case 'R':
    // Turn right.
      right_turn();
      break;
    case 'B':
    // Turn around.
      right_turn();
      
      right_turn();
      break;
    case 'S':
    // Don't do anything.
      break;
  }
}

void maze_solve () {
  while(1)
  {
    // FIRST MAIN LOOP BODY
    follow_segment();

    // Drive straight a bit. This helps us in case we entered the
    // intersection at an angle.
    // Note that we are slowing down - this prevents the robot 
    // from tipping forwards too much.
    //MotorSpeedA = 50;
    //MotorSpeedB = 50;
    straight(50);
    delay(50);

    // These variables record whether the robot has seen a line to the
    // left, straight ahead, and right, while examining the current
    // intersection.
    unsigned char found_left=0;
    unsigned char found_straight=0;
    unsigned char found_right=0;

    // Now read the sensors and check the intersection type.#
    long DISTANCE_L = (sensor.readRangeSingleMillimeters());
    long DISTANCE_R = (sensor2.readRangeSingleMillimeters());
    long DISTANCE_F = (sensor3.readRangeSingleMillimeters());

    // Check the left and right exits.
    if (DISTANCE_L > 100 && DISTANCE_R > 100) {
      found_left = 1;
    } 
    right_turn();
   
    if (DISTANCE_F > 100) {
      found_right = 1;
    } 
    
    left_turn ();

    //MotorSpeedA = 40;
    //MotorSpeedB = 40;
    straight (40);
    delay(200);

    if (DISTANCE_F >100){
      found_straight = 1;
    } 

    // Check for the ending spot.
    // When there is 4 squares together.

    // Intersection identification is complete.
    // If the maze has been solved, we can follow the existing 
    // path. Otherwise, we need to learn the solution.
    unsigned char dir = select_turn(found_left, found_straight, found_right);

    // Make the turn indicated by the path.
    turn(dir);

    // Store the intersection in the path variable.
    path[path_length] = dir;
    path_length ++;

    simplify_path();

    while(1)
    {
      straight(0);

      int i;
      for(i=0;i<path_length;i++)
      {
        //SECOND MAIN LOOP BODY
        follow_segment();

        // Drive straight while slowing down, as before.
        straight(50);

        delay(50);
        //MotorSpeedA = 40;
        //MotorSpeedB = 40;
        straight (40);
        delay(200);

        // Make a turn according to the instruction stored in
        // path[i].
        turn(path[i]);
      }   

      follow_segment();

    }
  }
}

void loop()
{
  maze_solve();

  //CHECK DISTANCES
  //long DISTANCE_L = (sensor.readRangeSingleMillimeters());
  //long DISTANCE_R = (sensor2.readRangeSingleMillimeters());
  //long DISTANCE_F = (sensor3.readRangeSingleMillimeters());

  //L Sensor
  
    //Serial.print("Distance L: ");
    //Serial.println(DISTANCE_L);
    //Serial.println("_________________________________");
    //Serial.println("");
  
  //R Sensor
 
    //Serial.print("Distance R: ");
    //Serial.println(DISTANCE_R);
    //Serial.println("_________________________________");
    //Serial.println("");
  

  
  //MOTOR
  
 // Set Motor A forward
  //digitalWrite(in1A, HIGH);
  //digitalWrite(in2A, LOW);
  
 // Set Motor B forward
  //digitalWrite(in1B, HIGH);
  //digitalWrite(in2B, LOW);  
  
 // Read potentiometer and convert to range of 0-255
  //MotorSpeedA = 100;
  //MotorSpeedB = 100;

  // Set the motor speeds  
  //analogWrite(pwmA, MotorSpeedA);
  //analogWrite(pwmB, MotorSpeedB);

  //Serial.println(MotorSpeedA);
  //Serial.println(MotorSpeedB);
  //Serial.println("_________________________________");
  //Serial.println("");

  

  
  delay(200);//can change to a lower time like 100
}
